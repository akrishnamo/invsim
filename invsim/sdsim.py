# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_sdsim.ipynb.

# %% auto 0
__all__ = ['foo', 'clip_date', 'Get_Day_Wise_Order_Qty']

# %% ../nbs/00_sdsim.ipynb 4
def foo(): return 10

# %% ../nbs/00_sdsim.ipynb 5
def clip_date(df_full_range):
    """ 
    This function clips the date based on the below criteria
    Note: If the sales qty is zero in the beginning, the date range is trimmed off
    at the begining, till the first positive sales qty is observed
    """

    # check if sales is 0 at the begining. if yes, trim-off the data to start with first postive sales qty
    start = df_full_range.loc[df_full_range['qty'] > 0].index

    if len(start) > 0:
    # 30 is added because, the bootstrap function required 30 day time window.
    
        if start[0] + 30  < len(df_full_range) :
            date = df_full_range.at[start[0], 'date']
        else:
            date = df_full_range.at[0, 'date']
    else:
        date = df_full_range.at[0, 'date']


    return date

# %% ../nbs/00_sdsim.ipynb 6
def Get_Day_Wise_Order_Qty(df_sales_data, MARKET_CODE_ID, DATE_RANGE):
    """ Get daywise sales data for a given SKU in a given date range """


    sub_df = df_sales_data[df_sales_data['mktcode_id'] == MARKET_CODE_ID][[ 'date', 'qty']]
    sub_df.reset_index(drop = True, inplace = True)

    def all_date_dataframe(sub_df):
        """ creates a dataframe having all dates. since the original dataframe has date of ordering only"""
        latest_date    = df_sales_data.date.max()
        begin_date     = latest_date - timedelta(weeks = DATE_RANGE)

        idx = pd.date_range(begin_date, latest_date)
        df_dates = pd.DataFrame(index = idx)
        df_dates.index.name = 'date'

        df_final = pd.merge(df_dates, sub_df, on = ['date'], how = 'left')
        df_final.fillna(0, inplace= True)
        return df_final

    # full range sales qty
    df_full_range = all_date_dataframe(sub_df)
    clipped_date = clip_date(df_full_range)


    mask1 = df_full_range['date'] >= clipped_date
    filtered_series = df_full_range[mask1].reset_index(drop = True)

    return filtered_series
